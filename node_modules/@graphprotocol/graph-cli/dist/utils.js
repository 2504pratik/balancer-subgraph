"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const js_yaml_1 = __importDefault(require("js-yaml"));
const debug_1 = __importDefault(require("./debug"));
const utilsDebug = (0, debug_1.default)('graph-cli:utils');
async function loadSubgraphSchemaFromIPFS(ipfsClient, manifest) {
    try {
        const manifestBuffer = ipfsClient.cat(manifest);
        let manifestFile = '';
        for await (const chunk of manifestBuffer) {
            manifestFile += Buffer.from(chunk).toString('utf8'); // Explicitly convert each chunk to UTF-8
        }
        const manifestYaml = js_yaml_1.default.safeLoad(manifestFile);
        let schema = manifestYaml.schema.file['/'];
        if (schema.startsWith('/ipfs/')) {
            schema = schema.slice(6);
        }
        const schemaBuffer = ipfsClient.cat(schema);
        let schemaFile = '';
        for await (const chunk of schemaBuffer) {
            schemaFile += Buffer.from(chunk).toString('utf8'); // Explicitly convert each chunk to UTF-8
        }
        return schemaFile;
    }
    catch (e) {
        utilsDebug.extend('loadSubgraphSchemaFromIPFS')(`Failed to load schema from IPFS ${manifest}`);
        utilsDebug.extend('loadSubgraphSchemaFromIPFS')(e);
        throw Error(`Failed to load schema from IPFS ${manifest}`);
    }
}
exports.default = loadSubgraphSchemaFromIPFS;
